'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { 
  MapPin, Plus, Edit, Trash2, Save, X, Calendar, Users, TreePine,
  ArrowLeft, Bike, Navigation, Globe, Camera, Image as ImageIcon,
  Filter, Link as LinkIcon, Upload, Grid, Map
} from 'lucide-react';
import { toast } from 'sonner';
import Link from 'next/link';
import * as XLSX from 'xlsx';

// Enhanced data structure
interface MapLocation {
  id: number;
  name: string;
  location: string;
  coordinates: { lat: number; lng: number };
  date: string;
  type: string;
  participants: number;
  treesPlanted: number;
  description: string;
  image: string;
  organizer: string;
  status: string;
  photos: Photo[];
}

interface Photo {
  id: number;
  locationId: number;
  url: string;
  title: string;
  description: string;
  year: string;
  tags: string[];
  uploadDate: string;
  isPrimary: boolean;
}

// Initial data with integrated structure
const initialMapData: MapLocation[] = [
  {
    id: 1,
    name: 'Himalayan Tree Drive',
    location: 'Kathmandu, Nepal',
    coordinates: { lat: 27.7172, lng: 85.3240 },
    date: '2024-12-15',
    type: 'Tree Planting',
    participants: 200,
    treesPlanted: 1000,
    description: 'Epic high-altitude ride through the Himalayas, planting native trees to combat deforestation in the region.',
    image: 'https://images.pexels.com/photos/1119796/pexels-photo-1119796.jpeg?auto=compress&cs=tinysrgb&w=300',
    organizer: 'Nepal Riders Club',
    status: 'completed',
    photos: [
      {
        id: 1,
        locationId: 1,
        url: 'https://images.pexels.com/photos/1119796/pexels-photo-1119796.jpeg?auto=compress&cs=tinysrgb&w=500',
        title: 'Mountain Trail Adventure',
        description: 'Riders navigating through mountain trails',
        year: '2024',
        tags: ['Mountain', 'Trail', 'Adventure'],
        uploadDate: '2024-12-15',
        isPrimary: true
      },
      {
        id: 2,
        locationId: 1,
        url: 'https://images.pexels.com/photos/1005648/pexels-photo-1005648.jpeg?auto=compress&cs=tinysrgb&w=500',
        title: 'Tree Planting Ceremony',
        description: 'Community members planting trees',
        year: '2024',
        tags: ['Tree Planting', 'Community'],
        uploadDate: '2024-12-15',
        isPrimary: false
      }
    ]
  },
  {
    id: 2,
    name: 'Pacific Coast Green Ride',
    location: 'Sydney, Australia',
    coordinates: { lat: -33.8688, lng: 151.2093 },
    date: '2024-11-20',
    type: 'Beach Cleanup',
    participants: 350,
    treesPlanted: 800,
    description: 'Coastal ride combined with beach cleanup and mangrove planting along the Pacific Coast.',
    image: 'https://images.pexels.com/photos/1416530/pexels-photo-1416530.jpeg?auto=compress&cs=tinysrgb&w=300',
    organizer: 'Aussie Green Riders',
    status: 'completed',
    photos: [
      {
        id: 3,
        locationId: 2,
        url: 'https://images.pexels.com/photos/1416530/pexels-photo-1416530.jpeg?auto=compress&cs=tinysrgb&w=500',
        title: 'Coastal Cleanup Drive',
        description: 'Beach cleanup and conservation efforts',
        year: '2024',
        tags: ['Beach', 'Cleanup', 'Conservation'],
        uploadDate: '2024-11-20',
        isPrimary: true
      }
    ]
  }
];

export default function IntegratedMapGalleryPage() {
  const [mapData, setMapData] = useState<MapLocation[]>(initialMapData);
  const [viewMode, setViewMode] = useState<'map' | 'gallery'>('map');
  const [editingLocation, setEditingLocation] = useState<MapLocation | null>(null);
  const [editingPhoto, setEditingPhoto] = useState<Photo | null>(null);
  const [isAddingLocation, setIsAddingLocation] = useState(false);
  const [isAddingPhoto, setIsAddingPhoto] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<MapLocation | null>(null);
  const [filterType, setFilterType] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterYear, setFilterYear] = useState('all');

  // Form states
  const [locationFormData, setLocationFormData] = useState({
    name: '', location: '', latitude: '', longitude: '', date: '', 
    type: '', participants: '', treesPlanted: '', description: '', 
    image: '', organizer: '', status: 'upcoming'
  });

  const [photoFormData, setPhotoFormData] = useState({
    locationId: 0,
    url: '',
    title: '',
    description: '',
    year: '',
    tags: '',
    isPrimary: false
  });

  const eventTypes = [
    'Tree Planting', 'Beach Cleanup', 'Conservation', 'Awareness',
    'Desert Greening', 'Water Conservation', 'Urban Planting', 'Mountain Cleanup'
  ];

  const statuses = ['upcoming', 'ongoing', 'completed', 'cancelled'];

  // Load data from localStorage on mount
  useEffect(() => {
    loadDataFromStorage();
  }, []);

  const loadDataFromStorage = () => {
    try {
      const savedData = localStorage.getItem('integratedMapGalleryData');
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setMapData(parsedData);
      }
    } catch (error) {
      console.error('Error loading data:', error);
      toast.error('Failed to load data from storage');
    }
  };

  const saveDataToStorage = (data: MapLocation[]) => {
    try {
      localStorage.setItem('integratedMapGalleryData', JSON.stringify(data));
      
      // Export to Excel
      const exportData = data.map(location => ({
        locationId: location.id,
        locationName: location.name,
        location: location.location,
        coordinates: `${location.coordinates.lat}, ${location.coordinates.lng}`,
        date: location.date,
        type: location.type,
        participants: location.participants,
        treesPlanted: location.treesPlanted,
        organizer: location.organizer,
        status: location.status,
        totalPhotos: location.photos.length,
        photos: location.photos.map(photo => ({
          photoId: photo.id,
          photoTitle: photo.title,
          photoUrl: photo.url,
          photoYear: photo.year,
          photoTags: photo.tags.join(', '),
          isPrimary: photo.isPrimary
        }))
      }));

      const ws = XLSX.utils.json_to_sheet(exportData);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'IntegratedData');
      XLSX.writeFile(wb, `integrated_map_gallery_${new Date().toISOString().split('T')[0]}.xlsx`);
      
      toast.success('Data saved and exported successfully!');
    } catch (error) {
      console.error('Error saving data:', error);
      toast.error('Failed to save data');
    }
  };

  const updateMapData = (newData: MapLocation[]) => {
    setMapData(newData);
    saveDataToStorage(newData);
    
    // Trigger real-time update
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('adminDataUpdate', { 
        detail: { section: 'integratedMapGallery', data: newData } 
      }));
    }
  };

  // Location management functions
  const handleAddLocation = () => {
    if (!locationFormData.name || !locationFormData.location || 
        !locationFormData.latitude || !locationFormData.longitude) {
      toast.error('Please fill in all required fields');
      return;
    }

    const newLocation: MapLocation = {
      id: Date.now(),
      ...locationFormData,
      coordinates: { 
        lat: parseFloat(locationFormData.latitude), 
        lng: parseFloat(locationFormData.longitude) 
      },
      participants: parseInt(locationFormData.participants) || 0,
      treesPlanted: parseInt(locationFormData.treesPlanted) || 0,
      photos: []
    };

    const updatedData = [...mapData, newLocation];
    updateMapData(updatedData);
    
    resetLocationForm();
    setIsAddingLocation(false);
    toast.success('Location added successfully!');
  };

  const handleUpdateLocation = () => {
    if (!editingLocation) return;

    const updatedData = mapData.map(location => 
      location.id === editingLocation.id 
        ? {
            ...location,
            ...locationFormData,
            coordinates: { 
              lat: parseFloat(locationFormData.latitude), 
              lng: parseFloat(locationFormData.longitude) 
            },
            participants: parseInt(locationFormData.participants) || 0,
            treesPlanted: parseInt(locationFormData.treesPlanted) || 0
          }
        : location
    );

    updateMapData(updatedData);
    setEditingLocation(null);
    resetLocationForm();
    toast.success('Location updated successfully!');
  };

  const handleDeleteLocation = (id: number) => {
    if (!confirm('Are you sure you want to delete this location and all its photos?')) return;

    const updatedData = mapData.filter(location => location.id !== id);
    updateMapData(updatedData);
    toast.success('Location deleted successfully!');
  };

  // Photo management functions
  const handleAddPhoto = () => {
    if (!photoFormData.locationId || !photoFormData.url || !photoFormData.title) {
      toast.error('Please fill in all required fields');
      return;
    }

    const newPhoto: Photo = {
      id: Date.now(),
      locationId: photoFormData.locationId,
      url: photoFormData.url,
      title: photoFormData.title,
      description: photoFormData.description,
      year: photoFormData.year,
      tags: photoFormData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
      uploadDate: new Date().toISOString(),
      isPrimary: photoFormData.isPrimary
    };

    const updatedData = mapData.map(location => {
      if (location.id === photoFormData.locationId) {
        // If this is set as primary, make all other photos non-primary
        const updatedPhotos = photoFormData.isPrimary 
          ? location.photos.map(photo => ({ ...photo, isPrimary: false }))
          : location.photos;
        
        return {
          ...location,
          photos: [...updatedPhotos, newPhoto],
          // Update location's primary image if this is the primary photo
          image: photoFormData.isPrimary ? photoFormData.url : location.image
        };
      }
      return location;
    });

    updateMapData(updatedData);
    resetPhotoForm();
    setIsAddingPhoto(false);
    toast.success('Photo added successfully!');
  };

  const handleUpdatePhoto = () => {
    if (!editingPhoto) return;

    const updatedData = mapData.map(location => ({
      ...location,
      photos: location.photos.map(photo => 
        photo.id === editingPhoto.id 
          ? {
              ...photo,
              url: photoFormData.url,
              title: photoFormData.title,
              description: photoFormData.description,
              year: photoFormData.year,
              tags: photoFormData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
              isPrimary: photoFormData.isPrimary
            }
          : photoFormData.isPrimary ? { ...photo, isPrimary: false } : photo
      ),
      // Update location's primary image if this photo is now primary
      image: photoFormData.isPrimary && location.id === editingPhoto.locationId 
        ? photoFormData.url 
        : location.image
    }));

    updateMapData(updatedData);
    setEditingPhoto(null);
    resetPhotoForm();
    toast.success('Photo updated successfully!');
  };

  const handleDeletePhoto = (photoId: number, locationId: number) => {
    if (!confirm('Are you sure you want to delete this photo?')) return;

    const updatedData = mapData.map(location => {
      if (location.id === locationId) {
        const updatedPhotos = location.photos.filter(photo => photo.id !== photoId);
        return {
          ...location,
          photos: updatedPhotos,
          // If deleted photo was primary, set first remaining photo as primary
          image: location.photos.find(p => p.id === photoId)?.isPrimary && updatedPhotos.length > 0
            ? updatedPhotos[0].url
            : location.image
        };
      }
      return location;
    });

    updateMapData(updatedData);
    toast.success('Photo deleted successfully!');
  };

  const setPrimaryPhoto = (photoId: number, locationId: number) => {
    const updatedData = mapData.map(location => {
      if (location.id === locationId) {
        const updatedPhotos = location.photos.map(photo => ({
          ...photo,
          isPrimary: photo.id === photoId
        }));
        
        const primaryPhoto = updatedPhotos.find(p => p.isPrimary);
        
        return {
          ...location,
          photos: updatedPhotos,
          image: primaryPhoto?.url || location.image
        };
      }
      return location;
    });

    updateMapData(updatedData);
    toast.success('Primary photo updated!');
  };

  // Form reset functions
  const resetLocationForm = () => {
    setLocationFormData({
      name: '', location: '', latitude: '', longitude: '', date: '', 
      type: '', participants: '', treesPlanted: '', description: '', 
      image: '', organizer: '', status: 'upcoming'
    });
  };

  const resetPhotoForm = () => {
    setPhotoFormData({
      locationId: 0,
      url: '',
      title: '',
      description: '',
      year: '',
      tags: '',
      isPrimary: false
    });
  };

  // Filter functions
  const filteredLocations = mapData.filter(location => {
    const typeMatch = filterType === 'all' || location.type === filterType;
    const statusMatch = filterStatus === 'all' || location.status === filterStatus;
    return typeMatch && statusMatch;
  });

  const allPhotos = mapData.flatMap(location => 
    location.photos.map(photo => ({
      ...photo,
      locationName: location.name,
      locationDetails: location.location
    }))
  );

  const filteredPhotos = allPhotos.filter(photo => {
    const yearMatch = filterYear === 'all' || photo.year === filterYear;
    return yearMatch;
  });

  // Get statistics
  const totalPhotos = mapData.reduce((sum, location) => sum + location.photos.length, 0);
  const totalParticipants = mapData.reduce((sum, location) => sum + location.participants, 0);
  const totalTrees = mapData.reduce((sum, location) => sum + location.treesPlanted, 0);
  const totalCountries = new Set(mapData.map(location => location.location.split(', ')[1])).size;
  const years = [...new Set(allPhotos.map(photo => photo.year))].filter(year => year);

  // Helper functions
  const getTypeColor = (type: string) => {
    switch (type) {
      case 'Tree Planting': return 'bg-green-100 text-green-800';
      case 'Beach Cleanup': return 'bg-blue-100 text-blue-800';
      case 'Conservation': return 'bg-amber-100 text-amber-800';
      case 'Awareness': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'ongoing': return 'bg-blue-100 text-blue-800';
      case 'upcoming': return 'bg-yellow-100 text-yellow-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Link href="/admin/dashboard">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                Integrated Map & Gallery Management
              </h1>
              <p className="text-gray-600">Manage locations with linked photo galleries</p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Button 
              variant={viewMode === 'map' ? 'default' : 'outline'}
              onClick={() => setViewMode('map')}
            >
              <Map className="h-4 w-4 mr-2" />
              Map View
            </Button>
            <Button 
              variant={viewMode === 'gallery' ? 'default' : 'outline'}
              onClick={() => setViewMode('gallery')}
            >
              <Grid className="h-4 w-4 mr-2" />
              Gallery View
            </Button>
            <Button onClick={() => saveDataToStorage(mapData)} variant="outline">
              <Globe className="h-4 w-4 mr-2" />
              Export Data
            </Button>
            <Button onClick={() => setIsAddingLocation(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Add Location
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <div className="p-3 bg-blue-500 rounded-full">
                  <MapPin className="h-6 w-6 text-white" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-blue-700">{mapData.length}</div>
                  <div className="text-sm text-blue-600">Locations</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <div className="p-3 bg-purple-500 rounded-full">
                  <Camera className="h-6 w-6 text-white" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-purple-700">{totalPhotos}</div>
                  <div className="text-sm text-purple-600">Total Photos</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <div className="p-3 bg-green-500 rounded-full">
                  <Users className="h-6 w-6 text-white" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-green-700">{totalParticipants.toLocaleString()}</div>
                  <div className="text-sm text-green-600">Participants</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <div className="p-3 bg-orange-500 rounded-full">
                  <TreePine className="h-6 w-6 text-white" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-orange-700">{totalTrees.toLocaleString()}</div>
                  <div className="text-sm text-orange-600">Trees Planted</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8 border-0 shadow-lg">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4 flex-wrap gap-2">
              <div className="flex items-center space-x-2">
                <Filter className="h-5 w-5 text-gray-500" />
                <span className="font-medium">Filters:</span>
              </div>
              
              {viewMode === 'map' && (
                <>
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md"
                  >
                    <option value="all">All Types</option>
                    {eventTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md"
                  >
                    <option value="all">All Status</option>
                    {statuses.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </select>
                </>
              )}

              {viewMode === 'gallery' && (
                <select
                  value={filterYear}
                  onChange={(e) => setFilterYear(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-md"
                >
                  <option value="all">All Years</option>
                  {years.map(year => (
                    <option key={year} value={year}>{year}</option>
                  ))}
                </select>
              )}

              <Button
                variant="outline"
                onClick={() => {
                  setFilterType('all');
                  setFilterStatus('all');
                  setFilterYear('all');
                }}
              >
                Clear Filters
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Content based on view mode */}
        {viewMode === 'map' ? (
          /* Map View - Locations with their photos */
          <div className="space-y-6">
            {filteredLocations.map((location) => (
              <Card key={location.id} className="border-0 shadow-xl">
                <CardHeader className="bg-gradient-to-r from-green-500 to-blue-500 text-white">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-3">
                      <MapPin className="h-6 w-6" />
                      <span>{location.name}</span>
                    </CardTitle>
                    <div className="flex items-center space-x-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        onClick={() => {
                          setSelectedLocation(location);
                          setPhotoFormData({
                            ...photoFormData,
                            locationId: location.id,
                            year: new Date().getFullYear().toString()
                          });
                          setIsAddingPhoto(true);
                        }}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Photo
                      </Button>
                      <Button
                        size="sm"
                        variant="secondary"
                        onClick={() => {
                          setEditingLocation(location);
                          setLocationFormData({
                            name: location.name,
                            location: location.location,
                            latitude: location.coordinates.lat.toString(),
                            longitude: location.coordinates.lng.toString(),
                            date: location.date,
                            type: location.type,
                            participants: location.participants.toString(),
                            treesPlanted: location.treesPlanted.toString(),
                            description: location.description,
                            image: location.image,
                            organizer: location.organizer,
                            status: location.status
                          });
                        }}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        size="sm"
                        variant="secondary"
                        onClick={() => handleDeleteLocation(location.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Location Details */}
                    <div className="lg:col-span-1">
                      <div className="space-y-4">
                        <div>
                          <h3 className="font-semibold text-gray-900 mb-2">Location Details</h3>
                          <div className="space-y-2 text-sm">
                            <div className="flex items-center space-x-2">
                              <MapPin className="h-4 w-4 text-gray-500" />
                              <span>{location.location}</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Calendar className="h-4 w-4 text-gray-500" />
                              <span>{new Date(location.date).toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Badge className={getTypeColor(location.type)}>
                                {location.type}
                              </Badge>
                              <Badge className={getStatusColor(location.status)}>
                                {location.status}
                              </Badge>
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-medium text-gray-900 mb-1">Impact</h4>
                          <div className="text-sm text-gray-600">
                            <div>👥 {location.participants} participants</div>
                            <div>🌳 {location.treesPlanted} trees planted</div>
                          </div>
                        </div>

                        <div>
                          <h4 className="font-medium text-gray-900 mb-1">Description</h4>
                          <p className="text-sm text-gray-600">{location.description}</p>
                        </div>
                      </div>
                    </div>

                    {/* Photos Gallery */}
                    <div className="lg:col-span-2">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="font-semibold text-gray-900">
                          Photo Gallery ({location.photos.length} photos)
                        </h3>
                      </div>
                      
                      {location.photos.length === 0 ? (
                        <div className="text-center py-8 bg-gray-50 rounded-lg">
                          <Camera className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                          <p className="text-gray-600">No photos yet</p>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              setSelectedLocation(location);
                              setPhotoFormData({
                                ...photoFormData,
                                locationId: location.id,
                                year: new Date().getFullYear().toString()
                              });
                              setIsAddingPhoto(true);
                            }}
                            className="mt-2"
                          >
                            <Plus className="h-4 w-4 mr-1" />
                            Add First Photo
                          </Button>
                        </div>
                      ) : (
                         <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                          {location.photos.map((photo) => (
                            <div key={photo.id} className="relative group">
                              <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                                <img
                                  src={photo.url}
                                  alt={photo.title}
                                  className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                                />
                              </div>
                              
                              {/* Photo overlay */}
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-300 rounded-lg flex items-center justify-center">
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex space-x-2">
                                  <Button
                                    size="sm"
                                    variant="secondary"
                                    onClick={() => {
                                      setEditingPhoto(photo);
                                      setPhotoFormData({
                                        locationId: photo.locationId,
                                        url: photo.url,
                                        title: photo.title,
                                        description: photo.description,
                                        year: photo.year,
                                        tags: photo.tags.join(', '),
                                        isPrimary: photo.isPrimary
                                      });
                                    }}
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="secondary"
                                    onClick={() => handleDeletePhoto(photo.id, location.id)}
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                  {!photo.isPrimary && (
                                    <Button
                                      size="sm"
                                      variant="secondary"
                                      onClick={() => setPrimaryPhoto(photo.id, location.id)}
                                      title="Set as primary"
                                    >
                                      <Camera className="h-4 w-4" />
                                    </Button>
                                  )}
                                </div>
                              </div>
                              
                              {/* Primary indicator */}
                              {photo.isPrimary && (
                                <div className="absolute top-2 right-2 bg-yellow-500 text-white px-2 py-1 rounded-full text-xs font-medium">
                                  Primary
                                </div>
                              )}
                              
                              {/* Photo info */}
                              <div className="mt-2">
                                <h4 className="font-medium text-sm text-gray-900">{photo.title}</h4>
                                <p className="text-xs text-gray-600 mt-1">{photo.description}</p>
                                <div className="flex items-center justify-between mt-1">
                                  <span className="text-xs text-gray-500">{photo.year}</span>
                                  <div className="flex flex-wrap gap-1">
                                    {photo.tags.map((tag, idx) => (
                                      <span key={idx} className="bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-xs">
                                        {tag}
                                      </span>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          /* Gallery View - All photos */
          <div className="space-y-6">
            {filteredPhotos.length === 0 ? (
              <Card className="border-0 shadow-lg">
                <CardContent className="p-12 text-center">
                  <ImageIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">No photos found</h3>
                  <p className="text-gray-600">Try adjusting your filters or add some photos to locations.</p>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {filteredPhotos.map((photo) => (
                  <Card key={photo.id} className="border-0 shadow-lg overflow-hidden group">
                    <div className="aspect-square bg-gray-100 overflow-hidden">
                      <img
                        src={photo.url}
                        alt={photo.title}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    </div>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-gray-900 truncate">{photo.title}</h3>
                        {photo.isPrimary && (
                          <Badge className="bg-yellow-100 text-yellow-800">Primary</Badge>
                        )}
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-2 line-clamp-2">{photo.description}</p>
                      
                      <div className="space-y-2">
                        <div className="text-xs text-gray-500">
                          📍 {photo.locationName}
                        </div>
                        <div className="text-xs text-gray-500">
                          📅 {photo.year}
                        </div>
                        <div className="flex flex-wrap gap-1">
                          {photo.tags.map((tag, idx) => (
                            <span key={idx} className="bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-xs">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between mt-4">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            setEditingPhoto(photo);
                            setPhotoFormData({
                              locationId: photo.locationId,
                              url: photo.url,
                              title: photo.title,
                              description: photo.description,
                              year: photo.year,
                              tags: photo.tags.join(', '),
                              isPrimary: photo.isPrimary
                            });
                          }}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeletePhoto(photo.id, photo.locationId)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Add Location Dialog */}
        <Dialog open={isAddingLocation} onOpenChange={setIsAddingLocation}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Add New Location</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Location Name *</Label>
                  <Input
                    id="name"
                    value={locationFormData.name}
                    onChange={(e) => setLocationFormData({...locationFormData, name: e.target.value})}
                    placeholder="Enter location name"
                  />
                </div>
                <div>
                  <Label htmlFor="location">Location Address *</Label>
                  <Input
                    id="location"
                    value={locationFormData.location}
                    onChange={(e) => setLocationFormData({...locationFormData, location: e.target.value})}
                    placeholder="City, Country"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="latitude">Latitude *</Label>
                  <Input
                    id="latitude"
                    type="number"
                    step="any"
                    value={locationFormData.latitude}
                    onChange={(e) => setLocationFormData({...locationFormData, latitude: e.target.value})}
                    placeholder="e.g., 27.7172"
                  />
                </div>
                <div>
                  <Label htmlFor="longitude">Longitude *</Label>
                  <Input
                    id="longitude"
                    type="number"
                    step="any"
                    value={locationFormData.longitude}
                    onChange={(e) => setLocationFormData({...locationFormData, longitude: e.target.value})}
                    placeholder="e.g., 85.3240"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="date">Date</Label>
                  <Input
                    id="date"
                    type="date"
                    value={locationFormData.date}
                    onChange={(e) => setLocationFormData({...locationFormData, date: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="type">Event Type</Label>
                  <Select value={locationFormData.type} onValueChange={(value) => setLocationFormData({...locationFormData, type: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select event type" />
                    </SelectTrigger>
                    <SelectContent>
                      {eventTypes.map(type => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="participants">Participants</Label>
                  <Input
                    id="participants"
                    type="number"
                    value={locationFormData.participants}
                    onChange={(e) => setLocationFormData({...locationFormData, participants: e.target.value})}
                    placeholder="Number of participants"
                  />
                </div>
                <div>
                  <Label htmlFor="treesPlanted">Trees Planted</Label>
                  <Input
                    id="treesPlanted"
                    type="number"
                    value={locationFormData.treesPlanted}
                    onChange={(e) => setLocationFormData({...locationFormData, treesPlanted: e.target.value})}
                    placeholder="Number of trees planted"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="organizer">Organizer</Label>
                  <Input
                    id="organizer"
                    value={locationFormData.organizer}
                    onChange={(e) => setLocationFormData({...locationFormData, organizer: e.target.value})}
                    placeholder="Event organizer"
                  />
                </div>
                <div>
                  <Label htmlFor="status">Status</Label>
                  <Select value={locationFormData.status} onValueChange={(value) => setLocationFormData({...locationFormData, status: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map(status => (
                        <SelectItem key={status} value={status}>{status}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="image">Primary Image URL</Label>
                <Input
                  id="image"
                  value={locationFormData.image}
                  onChange={(e) => setLocationFormData({...locationFormData, image: e.target.value})}
                  placeholder="https://example.com/image.jpg"
                />
              </div>

              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={locationFormData.description}
                  onChange={(e) => setLocationFormData({...locationFormData, description: e.target.value})}
                  placeholder="Event description"
                  rows={3}
                />
              </div>

              <div className="flex items-center justify-end space-x-2">
                <Button variant="outline" onClick={() => {
                  setIsAddingLocation(false);
                  resetLocationForm();
                }}>
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
                <Button onClick={handleAddLocation}>
                  <Save className="h-4 w-4 mr-2" />
                  Add Location
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Edit Location Dialog */}
        <Dialog open={!!editingLocation} onOpenChange={(open) => !open && setEditingLocation(null)}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Edit Location</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-name">Location Name *</Label>
                  <Input
                    id="edit-name"
                    value={locationFormData.name}
                    onChange={(e) => setLocationFormData({...locationFormData, name: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-location">Location Address *</Label>
                  <Input
                    id="edit-location"
                    value={locationFormData.location}
                    onChange={(e) => setLocationFormData({...locationFormData, location: e.target.value})}
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-latitude">Latitude *</Label>
                  <Input
                    id="edit-latitude"
                    type="number"
                    step="any"
                    value={locationFormData.latitude}
                    onChange={(e) => setLocationFormData({...locationFormData, latitude: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-longitude">Longitude *</Label>
                  <Input
                    id="edit-longitude"
                    type="number"
                    step="any"
                    value={locationFormData.longitude}
                    onChange={(e) => setLocationFormData({...locationFormData, longitude: e.target.value})}
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-date">Date</Label>
                  <Input
                    id="edit-date"
                    type="date"
                    value={locationFormData.date}
                    onChange={(e) => setLocationFormData({...locationFormData, date: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-type">Event Type</Label>
                  <Select value={locationFormData.type} onValueChange={(value) => setLocationFormData({...locationFormData, type: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {eventTypes.map(type => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-participants">Participants</Label>
                  <Input
                    id="edit-participants"
                    type="number"
                    value={locationFormData.participants}
                    onChange={(e) => setLocationFormData({...locationFormData, participants: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-treesPlanted">Trees Planted</Label>
                  <Input
                    id="edit-treesPlanted"
                    type="number"
                    value={locationFormData.treesPlanted}
                    onChange={(e) => setLocationFormData({...locationFormData, treesPlanted: e.target.value})}
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-organizer">Organizer</Label>
                  <Input
                    id="edit-organizer"
                    value={locationFormData.organizer}
                    onChange={(e) => setLocationFormData({...locationFormData, organizer: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-status">Status</Label>
                  <Select value={locationFormData.status} onValueChange={(value) => setLocationFormData({...locationFormData, status: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {statuses.map(status => (
                        <SelectItem key={status} value={status}>{status}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="edit-image">Primary Image URL</Label>
                <Input
                  id="edit-image"
                  value={locationFormData.image}
                  onChange={(e) => setLocationFormData({...locationFormData, image: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="edit-description">Description</Label>
                <Textarea
                  id="edit-description"
                  value={locationFormData.description}
                  onChange={(e) => setLocationFormData({...locationFormData, description: e.target.value})}
                  rows={3}
                />
              </div>

              <div className="flex items-center justify-end space-x-2">
                <Button variant="outline" onClick={() => {
                  setEditingLocation(null);
                  resetLocationForm();
                }}>
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
                <Button onClick={handleUpdateLocation}>
                  <Save className="h-4 w-4 mr-2" />
                  Update Location
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Add Photo Dialog */}
        <Dialog open={isAddingPhoto} onOpenChange={setIsAddingPhoto}>
          <DialogContent className="max-w-lg">
            <DialogHeader>
              <DialogTitle>Add Photo to {selectedLocation?.name}</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="photo-url">Photo URL *</Label>
                <Input
                  id="photo-url"
                  value={photoFormData.url}
                  onChange={(e) => setPhotoFormData({...photoFormData, url: e.target.value})}
                  placeholder="https://example.com/photo.jpg"
                />
              </div>

              <div>
                <Label htmlFor="photo-title">Title *</Label>
                <Input
                  id="photo-title"
                  value={photoFormData.title}
                  onChange={(e) => setPhotoFormData({...photoFormData, title: e.target.value})}
                  placeholder="Photo title"
                />
              </div>

              <div>
                <Label htmlFor="photo-description">Description</Label>
                <Textarea
                  id="photo-description"
                  value={photoFormData.description}
                  onChange={(e) => setPhotoFormData({...photoFormData, description: e.target.value})}
                  placeholder="Photo description"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="photo-year">Year</Label>
                  <Input
                    id="photo-year"
                    value={photoFormData.year}
                    onChange={(e) => setPhotoFormData({...photoFormData, year: e.target.value})}
                    placeholder="2024"
                  />
                </div>
                <div>
                  <Label htmlFor="photo-tags">Tags (comma-separated)</Label>
                  <Input
                    id="photo-tags"
                    value={photoFormData.tags}
                    onChange={(e) => setPhotoFormData({...photoFormData, tags: e.target.value})}
                    placeholder="mountain, adventure, nature"
                  />
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="photo-primary"
                  checked={photoFormData.isPrimary}
                  onChange={(e) => setPhotoFormData({...photoFormData, isPrimary: e.target.checked})}
                />
                <Label htmlFor="photo-primary">Set as primary photo for location</Label>
              </div>

              <div className="flex items-center justify-end space-x-2">
                <Button variant="outline" onClick={() => {
                  setIsAddingPhoto(false);
                  resetPhotoForm();
                }}>
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
                <Button onClick={handleAddPhoto}>
                  <Save className="h-4 w-4 mr-2" />
                  Add Photo
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Edit Photo Dialog */}
        <Dialog open={!!editingPhoto} onOpenChange={(open) => !open && setEditingPhoto(null)}>
          <DialogContent className="max-w-lg">
            <DialogHeader>
              <DialogTitle>Edit Photo</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="edit-photo-url">Photo URL *</Label>
                <Input
                  id="edit-photo-url"
                  value={photoFormData.url}
                  onChange={(e) => setPhotoFormData({...photoFormData, url: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="edit-photo-title">Title *</Label>
                <Input
                  id="edit-photo-title"
                  value={photoFormData.title}
                  onChange={(e) => setPhotoFormData({...photoFormData, title: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="edit-photo-description">Description</Label>
                <Textarea
                  id="edit-photo-description"
                  value={photoFormData.description}
                  onChange={(e) => setPhotoFormData({...photoFormData, description: e.target.value})}
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-photo-year">Year</Label>
                  <Input
                    id="edit-photo-year"
                    value={photoFormData.year}
                    onChange={(e) => setPhotoFormData({...photoFormData, year: e.target.value})}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-photo-tags">Tags (comma-separated)</Label>
                  <Input
                    id="edit-photo-tags"
                    value={photoFormData.tags}
                    onChange={(e) => setPhotoFormData({...photoFormData, tags: e.target.value})}
                  />
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="edit-photo-primary"
                  checked={photoFormData.isPrimary}
                  onChange={(e) => setPhotoFormData({...photoFormData, isPrimary: e.target.checked})}
                />
                <Label htmlFor="edit-photo-primary">Set as primary photo for location</Label>
              </div>

              <div className="flex items-center justify-end space-x-2">
                <Button variant="outline" onClick={() => {
                  setEditingPhoto(null);
                  resetPhotoForm();
                }}>
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
                <Button onClick={handleUpdatePhoto}>
                  <Save className="h-4 w-4 mr-2" />
                  Update Photo
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}